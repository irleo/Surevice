CREATE DATABASE Surevice_db;

-- Create a login at the server level
CREATE LOGIN surevice_admin WITH PASSWORD = 'surevice_db121';

-- Map the login to a user in your database and assign a role
USE [Surevice_db];
CREATE USER surevice_admin FOR LOGIN surevice_admin;
EXEC sp_addrolemember 'db_owner', 'surevice_admin';


-- 1. Users Table
CREATE TABLE Users (
    user_id INT IDENTITY(1,1) PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    user_type VARCHAR(20) CHECK (user_type IN ('customer', 'provider', 'admin')) NOT NULL,
    is_verified BIT DEFAULT 0,
    created_at DATETIME DEFAULT GETDATE(),
    last_name_change DATETIME NULL,
    gender VARCHAR(10) NOT NULL DEFAULT 'Other' CHECK (gender IN ('Male', 'Female', 'Other')
);

-- 2. Services Table
CREATE TABLE Services (
    service_id INT PRIMARY KEY AUTO_INCREMENT,
    provider_id INT NOT NULL,
    title VARCHAR(150) NOT NULL,
    description TEXT,
    service_fee DECIMAL(10,2) NOT NULL,
    average_rating DECIMAL(2,1) DEFAULT 0.0, 
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (provider_id) REFERENCES Users(user_id)
);

-- 3. Bookings Table
CREATE TABLE Bookings (
    booking_id INT IDENTITY(1,1) PRIMARY KEY,
    service_id INT NOT NULL,
    customer_id INT NOT NULL,
    booking_date DATETIME DEFAULT GETDATE(),
    scheduled_for DATETIME,
    status VARCHAR(20) CHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled')) DEFAULT 'pending',
    FOREIGN KEY (service_id) REFERENCES Services(service_id),
    FOREIGN KEY (customer_id) REFERENCES Users(user_id)
);

-- 4. Payments Table
CREATE TABLE Payments (
    payment_id INT IDENTITY(1,1) PRIMARY KEY,
    booking_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    fee_deducted DECIMAL(10,2) NOT NULL,
    provider_earnings DECIMAL(10,2) NOT NULL,
    status VARCHAR(20) CHECK (status IN ('held', 'released', 'refunded')) DEFAULT 'held',
    paid_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

-- 5. Wallets Table
CREATE TABLE Wallets (
    wallet_id INT IDENTITY(1,1) PRIMARY KEY,
    provider_id INT NOT NULL,
    balance DECIMAL(10,2) DEFAULT 0.00,
    last_updated DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (provider_id) REFERENCES Users(user_id)
);

-- 6. Reviews Table (Optional)
CREATE TABLE Reviews (
    review_id INT IDENTITY(1,1) PRIMARY KEY,
    booking_id INT NOT NULL,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    created_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

-- 7. ServiceImages Table
CREATE TABLE ServiceImages (
    image_id INT IDENTITY(1,1) PRIMARY KEY,
    service_id INT NOT NULL,
    image_path VARCHAR(255) NOT NULL,
    is_primary BIT DEFAULT 0,
    FOREIGN KEY (service_id) REFERENCES Services(service_id)
);

-- 8. Categories Table
CREATE TABLE Categories (
    category_id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(100) UNIQUE,
    color VARCHAR(20)
);

-- 9. ServiceCategoryLink
CREATE TABLE ServiceCategoryLink (
    service_id INT NOT NULL,
    category_id INT NOT NULL,
    PRIMARY KEY (service_id, category_id),
    FOREIGN KEY (service_id) REFERENCES Services(service_id),
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);

-- 10. Addresses Table
CREATE TABLE Addresses (
    address_id INT PRIMARY KEY IDENTITY(1,1),
    user_id INT NOT NULL,
    label VARCHAR(50),           -- like, "Home", "Work"
    street VARCHAR(255),
    barangay VARCHAR(100),
    city VARCHAR(100),
    province VARCHAR(100),
    postal_code VARCHAR(10),
    is_default BIT DEFAULT 0,
    created_at DATETIME DEFAULT GETDATE(),

    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);