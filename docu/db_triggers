-- Booking in_progress = Payment held
CREATE TRIGGER trg_BookingInProgress_InsertPayment
ON Bookings
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE p
    SET p.status = 'held', p.paid_at = NULL
    FROM Payments p
    JOIN inserted i ON p.booking_id = i.booking_id
    WHERE i.status = 'in_progress' AND p.status <> 'held';

    -- Optional: insert payment if not exists
    INSERT INTO Payments (booking_id, amount, fee_deducted, provider_earnings, status)
    SELECT 
        i.booking_id,
        s.service_fee,
        s.service_fee * 0.10,                          -- 10% commission
        s.service_fee * 0.90,                          -- provider gets 90%
        'held'
    FROM inserted i
    JOIN Bookings b ON i.booking_id = b.booking_id
    JOIN Services s ON b.service_id = s.service_id
    WHERE i.status = 'in_progress'
    AND NOT EXISTS (
        SELECT 1 FROM Payments p WHERE p.booking_id = i.booking_id
    );
END;

-- Booking completed = Release payment
CREATE TRIGGER trg_BookingCompleted_ReleasePayment
ON Bookings
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Update payment to 'released'
    UPDATE p
    SET p.status = 'released',
        p.paid_at = GETDATE()
    FROM Payments p
    JOIN inserted i ON p.booking_id = i.booking_id
    WHERE i.status = 'completed' AND p.status = 'held';

    -- Update provider wallet balance
    UPDATE w
    SET w.balance = w.balance + p.provider_earnings,
        w.last_updated = GETDATE()
    FROM Wallets w
    JOIN Services s ON s.provider_id = w.provider_id
    JOIN Bookings b ON b.service_id = s.service_id
    JOIN inserted i ON i.booking_id = b.booking_id
    JOIN Payments p ON p.booking_id = i.booking_id
    WHERE i.status = 'completed' AND p.status = 'released';
END;


-- Booking cancelled = Refund payment
CREATE TRIGGER trg_BookingCancelled_Refund
ON Bookings
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Mark payment as refunded
    UPDATE p
    SET p.status = 'refunded'
    FROM Payments p
    JOIN inserted i ON p.booking_id = i.booking_id
    WHERE i.status = 'cancelled' AND p.status = 'released';

    -- Deduct from wallet if previously released
    UPDATE w
    SET w.balance = w.balance - p.provider_earnings,
        w.last_updated = GETDATE()
    FROM Wallets w
    JOIN Services s ON s.provider_id = w.provider_id
    JOIN Bookings b ON b.service_id = s.service_id
    JOIN Payments p ON p.booking_id = b.booking_id
    JOIN inserted i ON i.booking_id = b.booking_id
    WHERE i.status = 'cancelled' AND p.status = 'released';
END;


-- Update average rating after review insert or update
CREATE OR ALTER TRIGGER trg_UpdateAverageRating
ON Reviews
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Recalculate average rating per service
    UPDATE s
    SET s.average_rating = r.avg_rating
    FROM Services s
    LEFT JOIN (
        SELECT 
            b.service_id,
            CAST(AVG(CAST(r.rating AS FLOAT)) AS DECIMAL(2,1)) AS avg_rating
        FROM Reviews r
        JOIN Bookings b ON r.booking_id = b.booking_id
        GROUP BY b.service_id
    ) r ON s.service_id = r.service_id
    WHERE s.service_id IN (
        SELECT DISTINCT b.service_id
        FROM inserted i
        JOIN Bookings b ON i.booking_id = b.booking_id
        UNION
        SELECT DISTINCT b.service_id
        FROM deleted d
        JOIN Bookings b ON d.booking_id = b.booking_id
    );
END;